import React, { useEffect, useState } from "react";
import TimeSelector from "./datePicker";
import TimeTable from "./EntryTable";
import ShineButton from "./shine-button";
import { addMinutes, parse } from "date-fns";
import {
  saveDateTable,
  getDateTable,
  getPatientBySlot,
  cancelAppointment,
} from "../http/docApi";
import { addDays, isBefore, isEqual } from "date-fns";

const Table = () => {
  const [loading, setLoading] = useState(true);
  const [dates, setDates] = useState(null);
  const [selectedDates, setSelectedDates] = useState([]); // –ú–∞—Å—Å–∏–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
  const [startTime, setStartTime] = useState("09:00");
  const [endTime, setEndTime] = useState("15:00");
  const [duration, setDuration] = useState(15);
  const [scheduledTimes, setScheduledTimes] = useState({}); // üíæ —Ö—Ä–∞–Ω–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  const [occupiedSlots, setOccupiedSlots] = useState([]); // –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
  const [modalData, setModalData] = useState(null); // –î–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [showModal, setShowModal] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [isCanceling, setIsCanceling] = useState(false); // –§–ª–∞–≥ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
  const [cancelReason, setCancelReason] = useState(""); // –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã
  useEffect(() => {
    (async () => {
      try {
        const data = await getDateTable();
        if (Object.keys(data.date).length) {
          const datesArr = Object.keys(data.date)
            .map((d) => new Date(d))
            .sort((a, b) => a - b);
          setDates({ startDate: datesArr[0], endDate: datesArr.at(-1) });
          setScheduledTimes(data.date);
        }
        const formatted = data.occupated.map((slotString) => {
          // –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–∞—Ç—É –∏ —Å–º–µ—â–µ–Ω–∏–µ
          const [date, time] = slotString.split("-");

          return { date: date, time: time };
        });
        setOccupiedSlots(formatted);
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const handleBuild = ({ startDate, endDate }) => {
    const occupiedDates = occupiedSlots.map((slot) => new Date(slot.date));
    const hasOccupiedOutside = occupiedDates.some(
      (date) => date < startDate || date > endDate
    );
    if (hasOccupiedOutside) {
      window.alert(
        "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
      );
      return;
    }
    const existingDates = Object.keys(scheduledTimes).map((d) => new Date(d));
    const hasOlder = existingDates.some((date) => date < startDate);
    if (hasOlder) {
      if (
        !window.confirm(
          "–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –¥–∞—Ç—ã —Ä–∞–Ω—å—à–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –æ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
        )
      ) {
        return;
      }
    }

    setDates({ startDate, endDate });
    setSelectedDates([]); // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã –≤ –Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    setScheduledTimes((prev) => {
      const updated = {};
      let current = new Date(startDate);
      while (isBefore(current, endDate) || isEqual(current, endDate)) {
        const key = current.toDateString();
        if (prev[key]) {
          updated[key] = prev[key];
        }
        current = addDays(current, 1);
      }
      return updated;
    });
  };

  const handleDateClick = (date) => {
    setSelectedDates((prevSelectedDates) =>
      prevSelectedDates.includes(date)
        ? prevSelectedDates.filter((d) => d !== date)
        : [...prevSelectedDates, date]
    );
  };

  const handleSave = async () => {
    const result = {};
    let current = new Date(dates.startDate);
    while (
      isBefore(current, dates.endDate) ||
      isEqual(current, dates.endDate)
    ) {
      const key = current.toDateString();
      result[key] = scheduledTimes[key] || [];
      current = addDays(current, 1);
    }

    console.log("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", JSON.stringify(result));
    const data = await saveDateTable(JSON.stringify(result));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const generateTimeSlots = () => {
    const slots = [];
    const start = parse(startTime, "HH:mm", new Date());
    const end = parse(endTime, "HH:mm", new Date());
    let current = start;

    while (current <= end) {
      slots.push(current.toTimeString().slice(0, 5)); // —Ñ–æ—Ä–º–∞—Ç HH:mm
      current = addMinutes(current, Number(duration));
    }

    return slots;
  };
  const handleGetPatientBySlot = async (time, dateKey) => {
    try {
      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç
      const userData = await getPatientBySlot(time, dateKey);

      if (userData) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ modalData –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setModalData({
          id_entry: userData.id_entry,
          patientName: userData.name,
          phone: userData.phone,
          date: dateKey,
          time: time,
        });
        setShowModal(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
  };
  const closeModal = () => {
    setShowModal(false); // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  };
  const handleCancelClick = () => {
    setIsCanceling(true); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
  };
  const handleCancelSubmit = async () => {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    if (!cancelReason) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã.");
      return;
    }
    const data = await cancelAppointment(modalData.id_entry, cancelReason);
    setScheduledTimes((prevScheduledTimes) => {
      const updatedScheduledTimes = { ...prevScheduledTimes };

      // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –∑–∞–ø–∏—Å–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–ª–æ—Ç
      const dateKey = modalData.date;
      const time = modalData.time;

      if (updatedScheduledTimes[dateKey]) {
        const updatedSlots = updatedScheduledTimes[dateKey].filter(
          (slot) => slot !== time // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç
        );
        updatedScheduledTimes[dateKey] = updatedSlots; // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ—Ç
      }

      return updatedScheduledTimes; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    });
    setShowModal(false); 
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–º–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API)

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsCanceling(false);
    setCancelReason(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  };
  const handleSubmitTime = () => {
    const slots = generateTimeSlots();

    setScheduledTimes((prev) => {
      const updatedScheduledTimes = { ...prev };
      selectedDates.forEach((dateKey) => {
        updatedScheduledTimes[dateKey] = slots;
      });

      return updatedScheduledTimes;
    });
  };

  const handleTimeSlotDelete = (slotsToDelete) => {
    setScheduledTimes((prevScheduledTimes) => {
      // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const updatedScheduledTimes = { ...prevScheduledTimes };

      slotsToDelete.forEach(({ dateKey, rowIndex }) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á dateKey –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å rowIndex
        if (updatedScheduledTimes[dateKey]) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
          const slots = [...updatedScheduledTimes[dateKey]]; // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
          if (slots[rowIndex] !== undefined) {
            slots[rowIndex] = ""; // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç
          }

          // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞
          updatedScheduledTimes[dateKey] = slots;
        }
      });

      return updatedScheduledTimes;
    });
  };
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π (–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–∏)
  const generateTimeOptions = () => {
    const validDuration = duration > 0 ? duration : 15; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const times = [];
    for (let h = 0; h < 24; h++) {
      for (let m = 0; m < 60; m += Number(validDuration)) {
        times.push(
          `${String(h).padStart(2, "0")}:${String(m).padStart(2, "0")}` // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:mm
        );
      }
    }
    return times;
  };

  const timeOptions = generateTimeOptions();

  return (
    <div>
      <TimeSelector initialDates={dates} onSubmit={handleBuild} />
      {dates && (
        <>
          <TimeTable
            startDate={dates.startDate}
            endDate={dates.endDate}
            onDateClick={handleDateClick}
            scheduledTimes={scheduledTimes}
            selectedDates={selectedDates} // –ø–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
            onTimeSlotDelete={handleTimeSlotDelete} // –ø–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            isEditable={true} // –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            occupiedSlots={occupiedSlots}
            handleGetPatientBySlot={handleGetPatientBySlot}
          />
          {selectedDates.length > 0 && (
            <div className="container-date-picker">
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  marginBottom: "20px",
                }}
              >
                <div className="section">
                  <label>–í—Ä–µ–º—è</label>
                  <div className="row">
                    <select
                      className="input"
                      value={startTime}
                      onChange={(e) => setStartTime(e.target.value)}
                    >
                      {timeOptions.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                    <select
                      className="input"
                      value={endTime}
                      onChange={(e) => setEndTime(e.target.value)}
                    >
                      {timeOptions.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
                <div className="section" style={{ marginLeft: "5px" }}>
                  <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö)</label>
                  <input
                    type="number"
                    className="input"
                    min="1"
                    step="1"
                    value={duration}
                    onChange={(e) => {
                      const value = e.target.value;
                      if (value === "") {
                        setDuration(""); // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–µ—Ä–µ—Ç—å –ø–æ–ª–µ
                      } else if (value >= 1) {
                        setDuration(Number(value)); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                      }
                    }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
                  />
                </div>
              </div>
              <ShineButton
                name="–ü—Ä–∏–º–µ–Ω–∏—Ç—å"
                onClick={handleSubmitTime}
                style={{
                  border: "2px solid rgb(186.25, 217.0833333333, 241.25)",
                }}
              />
            </div>
          )}
        </>
      )}
      {showModal && modalData && (
        <div className="filter-modal-overlay">
          <div className="filter-modal-content">
            <div className="filter-header">
              <h2>–ü—Ä–∏–µ–º</h2>
              <button className="close-btn" onClick={closeModal}>
                <i className="fa-solid fa-xmark"></i>
              </button>
            </div>
            <div className="filter-body">
              <p>
                <strong>–î–∞—Ç–∞: </strong>
                {new Date(modalData.date).toLocaleDateString("ru-RU")}
              </p>
              <p>
                <strong>–í—Ä–µ–º—è:</strong> {modalData.time}
              </p>
              <p>
                <strong>–ü–∞—Ü–∏–µ–Ω—Ç:</strong> {modalData.patientName}
              </p>
              <p>
                <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {modalData.phone}
              </p>
            </div>
            {isCanceling ? (
              <div>
                <textarea
                  value={cancelReason}
                  onChange={(e) => setCancelReason(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã"
                  rows={4}
                  style={{
                    width: "100%",
                    border: "1px solid rgb(158, 163, 165)",
                    borderRadius: "0.3em",
                    margin: "1em 0px",
                    height: "179px",
                  }}
                />
                <button className="apply-btn" onClick={handleCancelSubmit}>
                  –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
              </div>
            ) : (
              <button className="apply-btn" onClick={handleCancelClick}>
                –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
              </button>
            )}
          </div>
        </div>
      )}
      <ShineButton
        name="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        onClick={handleSave}
        style={{ border: "2px solid rgb(186.25, 217.0833333333, 241.25)" }}
      />
    </div>
  );
};

export default Table;
